@model ConversionMVC.Models.Conversion
@{
    ViewData["Title"] = "Currency";
}
<div class="row">
    <div class="col-md-4">
        <div class="text-right">
         <form method="post" asp-action="Currency">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>                    
            <div class="form-group">
                <label >From Currency :  <select asp-for="FromUnit" />
                @foreach (var item in ConversionMVC.Models.Conversion.listOfCurrency)
                {
                    <option value="@item.Value">@item.Key (@item.Value)</option>
                }
                 </select></label>             
                <span asp-validation-for="FromUnit" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label >To unit  : <select asp-for="ToUnit" />
                   @foreach (var item in ConversionMVC.Models.Conversion.listOfCurrency)
                {
                    <option value="@item.Value">@item.Key (@item.Value)</option>
                }
                 </select></label>
                  <span asp-validation-for="ToUnit" class="text-danger"></span>
            </div> 
            <div class="form-group">
                <label >Value     :  <input asp-for="Value"  /></label>
                <span asp-validation-for="Value" class="text-danger"></span>
            </div>
              <button type="submit" class="btn-danger">Submit </button>
             <a asp-action="Currency">Reset</a>
        </form>
        </div>
        @if(Model.new_amount!=null)
        {
            <p>@Model.old_amount in @Model.old_currency is @Model.new_amount in @Model.new_currency</p>
        }
    </div>
</div>



@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}



